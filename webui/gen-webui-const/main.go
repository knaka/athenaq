package main

import (
	"bytes"
	_ "embed"
	goimports "github.com/incu6us/goimports-reviser/v3/reviser"
	"github.com/knaka/go-pinfomap"
	"github.com/webui-dev/go-webui/v2"
	"os"
	"text/template"

	. "github.com/knaka/go-utils"
)

//go:embed webui-const.go.tmpl
var tmplBody string

func main() {
	tmplTree := template.Must(template.New("").Funcs(map[string]any{
		// /^// Code generated .* DO NOT EDIT\.$/ // go command - cmd/go - Go Packages https://pkg.go.dev/cmd/go#hdr-Generate_Go_files_by_processing_source
		"GeneratedContentNotice": func() string {
			return "Code generated by gen-webui-const. DO NOT EDIT."
		},
	}).Parse(tmplBody))
	buf := bytes.Buffer{}
	V0(tmplTree.Execute(&buf, V(pinfomap.NewIntTypeInfo(webui.Browser(0)))))
	filePath := "webui-const.go"
	V0(os.WriteFile(filePath, buf.Bytes(), 0o644))
	sourceFile := goimports.NewSourceFile("", filePath)
	V0(goimports.WithRemovingUnusedImports(sourceFile))
	V0(goimports.WithCodeFormatting(sourceFile))
	fixedText, _, differs, err := sourceFile.Fix()
	if err != nil {
		// Rename the file not to be used as a source file.
		V0(os.Rename(filePath, filePath+".err"))
		panic(err)
	}
	if differs {
		V0(os.WriteFile(filePath, fixedText, 0644))
	}
	Ignore(os.Remove(filePath + ".err"))
}
